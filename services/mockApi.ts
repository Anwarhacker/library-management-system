import { Book } from '../types';
import { INITIAL_BOOKS } from '../constants';

// --- In-memory "database" ---
let books: Book[] = [...INITIAL_BOOKS];
const SIMULATED_DELAY = 500; // ms

// --- Private utility functions ---
const findBookIndex = (id: string) => books.findIndex(b => b.id === id);

// --- Public API functions ---

/** Fetches all books from the database. */
export const getBooks = async (): Promise<Book[]> => {
  console.log('API: Fetching all books...');
  return new Promise(resolve => {
    setTimeout(() => {
      // Return a deep copy to prevent mutation of the original "database" array
      resolve(JSON.parse(JSON.stringify(books)));
    }, SIMULATED_DELAY);
  });
};

/** Fetches a single book by its ID. */
export const getBookById = async (id: string): Promise<Book | undefined> => {
  console.log(`API: Fetching book with id ${id}...`);
  return new Promise(resolve => {
    setTimeout(() => {
      const book = books.find(b => b.id === id);
      // Return a deep copy
      resolve(book ? JSON.parse(JSON.stringify(book)) : undefined);
    }, SIMULATED_DELAY);
  });
};

/** Adds a new book to the database. */
export const addBook = async (bookData: Omit<Book, 'id' | 'coverImageUrl'>): Promise<Book> => {
  console.log('API: Adding new book...', bookData);
  return new Promise(resolve => {
    setTimeout(() => {
      const newBook: Book = {
        ...bookData,
        id: crypto.randomUUID(),
        coverImageUrl: `https://picsum.photos/seed/${encodeURIComponent(bookData.title)}/400/600`,
      };
      books = [newBook, ...books];
      resolve(JSON.parse(JSON.stringify(newBook)));
    }, SIMULATED_DELAY);
  });
};

/** Adds a book generated by the AI service. */
export const addAIGeneratedBook = async (newBook: Book): Promise<Book> => {
    console.log('API: Adding new AI-generated book...', newBook);
    return new Promise(resolve => {
        setTimeout(() => {
            books = [newBook, ...books];
            resolve(JSON.parse(JSON.stringify(newBook)));
        }, SIMULATED_DELAY);
    });
};


/** Updates an existing book. */
export const updateBook = async (updatedBookData: Book): Promise<Book> => {
  console.log(`API: Updating book with id ${updatedBookData.id}...`, updatedBookData);
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const index = findBookIndex(updatedBookData.id);
      if (index !== -1) {
        books[index] = { ...updatedBookData };
        resolve(JSON.parse(JSON.stringify(books[index])));
      } else {
        reject(new Error('Book not found'));
      }
    }, SIMULATED_DELAY);
  });
};

/** Deletes a book from the database. */
export const deleteBook = async (id: string): Promise<{ success: boolean }> => {
  console.log(`API: Deleting book with id ${id}...`);
  return new Promise(resolve => {
    setTimeout(() => {
      const initialLength = books.length;
      books = books.filter(b => b.id !== id);
      resolve({ success: books.length < initialLength });
    }, SIMULATED_DELAY);
  });
};
